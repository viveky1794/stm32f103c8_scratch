
gpio_Driver_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000052c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800065c  08000664  00010664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800065c  0800065c  00010664  2**0
                  CONTENTS
  4 .ARM          00000000  0800065c  0800065c  00010664  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800065c  08000664  00010664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800065c  0800065c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000664  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000664  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010664  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007c9  00000000  00000000  0001068d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002bf  00000000  00000000  00010e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00011118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  000111f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000012e9  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000dbf  00000000  00000000  00012579  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004c51  00000000  00000000  00013338  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00017f89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000228  00000000  00000000  00018004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000644 	.word	0x08000644

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000644 	.word	0x08000644

08000170 <delay>:

#include "gpio_Driver.h"
#include "clock_Driver.h"

void delay()
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0

for(uint32_t i=0;i<605000;i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <delay+0x24>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>

}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	00093b47 	.word	0x00093b47

08000198 <EXTI9_5_IRQHandler>:



/***********	IRQ Handler	-> Interrupt Service Routine	************/
void EXTI9_5_IRQHandler(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0

GPIO_IRQHandler(5);
 800019c:	2005      	movs	r0, #5
 800019e:	f000 fa0b 	bl	80005b8 <GPIO_IRQHandler>
delay();
 80001a2:	f7ff ffe5 	bl	8000170 <delay>

}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <main>:

int main(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	set_RCC_HSI_Clock_APB2_1MHz();
 80001b0:	f000 f860 	bl	8000274 <set_RCC_HSI_Clock_APB2_1MHz>

	GPIO_Init(GPIOC,GPIO_PIN_14,GPIO_Mode_IPU, GPIO_Speed_INPUT);
 80001b4:	2300      	movs	r3, #0
 80001b6:	2208      	movs	r2, #8
 80001b8:	210e      	movs	r1, #14
 80001ba:	4817      	ldr	r0, [pc, #92]	; (8000218 <main+0x6c>)
 80001bc:	f000 f89e 	bl	80002fc <GPIO_Init>
	GPIO_Init(GPIOC,GPIO_PIN_13,GPIO_Mode_Out_PP, GPIO_Speed_2MHz);
 80001c0:	2302      	movs	r3, #2
 80001c2:	2200      	movs	r2, #0
 80001c4:	210d      	movs	r1, #13
 80001c6:	4814      	ldr	r0, [pc, #80]	; (8000218 <main+0x6c>)
 80001c8:	f000 f898 	bl	80002fc <GPIO_Init>
	GPIO_Init(GPIOB,GPIO_PIN_5,GPIO_Mode_AF_PP, GPIO_Speed_2MHz);
 80001cc:	2302      	movs	r3, #2
 80001ce:	2203      	movs	r2, #3
 80001d0:	2105      	movs	r1, #5
 80001d2:	4812      	ldr	r0, [pc, #72]	; (800021c <main+0x70>)
 80001d4:	f000 f892 	bl	80002fc <GPIO_Init>

	EXTI_IRQHandler( 23, EN );
 80001d8:	2101      	movs	r1, #1
 80001da:	2017      	movs	r0, #23
 80001dc:	f000 f9a2 	bl	8000524 <EXTI_IRQHandler>
	EXTI_IRQPriority(23, 15);
 80001e0:	210f      	movs	r1, #15
 80001e2:	2017      	movs	r0, #23
 80001e4:	f000 f9be 	bl	8000564 <EXTI_IRQPriority>


	for(;;)
	{
			if( GPIO_Read(GPIOC,14) )
 80001e8:	210e      	movs	r1, #14
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <main+0x6c>)
 80001ec:	f000 f986 	bl	80004fc <GPIO_Read>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d008      	beq.n	8000208 <main+0x5c>
			{
				GPIOC->BSRR |= BSRR_BIT_SET(13);
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <main+0x6c>)
 80001f8:	691b      	ldr	r3, [r3, #16]
 80001fa:	4a07      	ldr	r2, [pc, #28]	; (8000218 <main+0x6c>)
 80001fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000200:	6113      	str	r3, [r2, #16]
				delay();
 8000202:	f7ff ffb5 	bl	8000170 <delay>
 8000206:	e7ef      	b.n	80001e8 <main+0x3c>
			}else
			{
				GPIOC->BRR |= BRR_BIT(13);
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <main+0x6c>)
 800020a:	695b      	ldr	r3, [r3, #20]
 800020c:	4a02      	ldr	r2, [pc, #8]	; (8000218 <main+0x6c>)
 800020e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000212:	6153      	str	r3, [r2, #20]
			if( GPIO_Read(GPIOC,14) )
 8000214:	e7e8      	b.n	80001e8 <main+0x3c>
 8000216:	bf00      	nop
 8000218:	40011000 	.word	0x40011000
 800021c:	40010c00 	.word	0x40010c00

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490e      	ldr	r1, [pc, #56]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0b      	ldr	r4, [pc, #44]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 f9d5 	bl	80005fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffab 	bl	80001ac <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000264:	08000664 	.word	0x08000664
  ldr r2, =_sbss
 8000268:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800026c:	2000001c 	.word	0x2000001c

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <set_RCC_HSI_Clock_APB2_1MHz>:


}

void set_RCC_HSI_Clock_APB2_1MHz()
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

	// 1: #HSI oscillator clock / 2 selected as PLL input clock when PLL is disable
		RCC->CFGR |= HSI_DIV_2;
 8000278:	4b1f      	ldr	r3, [pc, #124]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 800027a:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	6053      	str	r3, [r2, #4]
		// 2:
		RCC->CFGR |= PLLMULL_x_4;// setting PLL for 16 MHz
 8000280:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 8000286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800028a:	6053      	str	r3, [r2, #4]
		// 3: APB2 presclaer AHB Div by 2 means 16/16 = 1Mhz
		RCC->CFGR |= 0x7<<11 ;
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 8000292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000296:	6053      	str	r3, [r2, #4]


		// 4: set HSI as clock
		RCC->CR  |= RCC_CR_HSION;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
		// 5: wait for HSI to be ready
		while(!(RCC->CR & RCC_CR_HSIRDY));
 80002a4:	bf00      	nop
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 0302 	and.w	r3, r3, #2
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <set_RCC_HSI_Clock_APB2_1MHz+0x32>


		// 6: Enable PLL
		RCC->CR |= PLL_ON;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002bc:	6013      	str	r3, [r2, #0]
		// 7: check PLL ready Flag
		while(!(RCC->CR & PLL_RDY_FLAG ));
 80002be:	bf00      	nop
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f9      	beq.n	80002c0 <set_RCC_HSI_Clock_APB2_1MHz+0x4c>

		// 8: select PLL as system Clock
		RCC->CFGR |= 0x00000002;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002ce:	685b      	ldr	r3, [r3, #4]
 80002d0:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	6053      	str	r3, [r2, #4]
		// 9: wait for PLL to be ready
		while( !( RCC->CFGR & 0x00000008 ) );
 80002d8:	bf00      	nop
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	f003 0308 	and.w	r3, r3, #8
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <set_RCC_HSI_Clock_APB2_1MHz+0x66>

		// 10: AHB preScaler div by 1
		RCC->CFGR |= 0x0 << 7;
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002e8:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <set_RCC_HSI_Clock_APB2_1MHz+0x84>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	6053      	str	r3, [r2, #4]

}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <GPIO_Init>:

void GPIO_Init(		GPIO_TypeDef *pGPIOx,
					uint8_t Pin,
					uint8_t Mode,
					uint8_t Speed		)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4603      	mov	r3, r0
 800030c:	70fb      	strb	r3, [r7, #3]
 800030e:	460b      	mov	r3, r1
 8000310:	70bb      	strb	r3, [r7, #2]
 8000312:	4613      	mov	r3, r2
 8000314:	707b      	strb	r3, [r7, #1]

	if(Mode == GPIO_Mode_Out_PP)
 8000316:	78bb      	ldrb	r3, [r7, #2]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d13c      	bne.n	8000396 <GPIO_Init+0x9a>
	{
		// 1: Enable Peripherial Clock
		if(pGPIOx == GPIOA)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a71      	ldr	r2, [pc, #452]	; (80004e4 <GPIO_Init+0x1e8>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_Init+0x36>
		{
			Enable_RCC_Pheririal_BUS(IOPAEN);
 8000324:	4b70      	ldr	r3, [pc, #448]	; (80004e8 <GPIO_Init+0x1ec>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a6f      	ldr	r2, [pc, #444]	; (80004e8 <GPIO_Init+0x1ec>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	e014      	b.n	800035c <GPIO_Init+0x60>
		}else if(pGPIOx == GPIOB)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a6d      	ldr	r2, [pc, #436]	; (80004ec <GPIO_Init+0x1f0>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_Init+0x4c>
		{
			Enable_RCC_Pheririal_BUS(IOPBEN);
 800033a:	4b6b      	ldr	r3, [pc, #428]	; (80004e8 <GPIO_Init+0x1ec>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a6a      	ldr	r2, [pc, #424]	; (80004e8 <GPIO_Init+0x1ec>)
 8000340:	f043 0308 	orr.w	r3, r3, #8
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	e009      	b.n	800035c <GPIO_Init+0x60>
		}else if(pGPIOx == GPIOC)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a69      	ldr	r2, [pc, #420]	; (80004f0 <GPIO_Init+0x1f4>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d105      	bne.n	800035c <GPIO_Init+0x60>
		{
			Enable_RCC_Pheririal_BUS(IOPCEN);
 8000350:	4b65      	ldr	r3, [pc, #404]	; (80004e8 <GPIO_Init+0x1ec>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a64      	ldr	r2, [pc, #400]	; (80004e8 <GPIO_Init+0x1ec>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
		}

		if(Pin >= 8)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b07      	cmp	r3, #7
 8000360:	d903      	bls.n	800036a <GPIO_Init+0x6e>
			Pin = Pin%8;
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	f003 0307 	and.w	r3, r3, #7
 8000368:	70fb      	strb	r3, [r7, #3]

		// 2: Setting GPIO pin Speed
		pGPIOx->CRH |= Speed << (Pin*4) ;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	7879      	ldrb	r1, [r7, #1]
 8000370:	78fa      	ldrb	r2, [r7, #3]
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	431a      	orrs	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	605a      	str	r2, [r3, #4]
		// 3 : Setting GPIO pin Mode(OUTPUT)
		pGPIOx->CRH |= Mode << ((Pin*4)+2);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	78b9      	ldrb	r1, [r7, #2]
 8000384:	78fa      	ldrb	r2, [r7, #3]
 8000386:	0092      	lsls	r2, r2, #2
 8000388:	3202      	adds	r2, #2
 800038a:	fa01 f202 	lsl.w	r2, r1, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]



	}

}
 8000394:	e0a0      	b.n	80004d8 <GPIO_Init+0x1dc>
	}else if(Mode == GPIO_Mode_IPU)
 8000396:	78bb      	ldrb	r3, [r7, #2]
 8000398:	2b08      	cmp	r3, #8
 800039a:	d13c      	bne.n	8000416 <GPIO_Init+0x11a>
			if(pGPIOx == GPIOA)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a51      	ldr	r2, [pc, #324]	; (80004e4 <GPIO_Init+0x1e8>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_Init+0xb6>
				Enable_RCC_Pheririal_BUS(IOPAEN);
 80003a4:	4b50      	ldr	r3, [pc, #320]	; (80004e8 <GPIO_Init+0x1ec>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a4f      	ldr	r2, [pc, #316]	; (80004e8 <GPIO_Init+0x1ec>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	e014      	b.n	80003dc <GPIO_Init+0xe0>
			}else if(pGPIOx == GPIOB)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a4d      	ldr	r2, [pc, #308]	; (80004ec <GPIO_Init+0x1f0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_Init+0xcc>
				Enable_RCC_Pheririal_BUS(IOPBEN);
 80003ba:	4b4b      	ldr	r3, [pc, #300]	; (80004e8 <GPIO_Init+0x1ec>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a4a      	ldr	r2, [pc, #296]	; (80004e8 <GPIO_Init+0x1ec>)
 80003c0:	f043 0308 	orr.w	r3, r3, #8
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	e009      	b.n	80003dc <GPIO_Init+0xe0>
			}else if(pGPIOx == GPIOC)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a49      	ldr	r2, [pc, #292]	; (80004f0 <GPIO_Init+0x1f4>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d105      	bne.n	80003dc <GPIO_Init+0xe0>
				Enable_RCC_Pheririal_BUS(IOPCEN);
 80003d0:	4b45      	ldr	r3, [pc, #276]	; (80004e8 <GPIO_Init+0x1ec>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a44      	ldr	r2, [pc, #272]	; (80004e8 <GPIO_Init+0x1ec>)
 80003d6:	f043 0310 	orr.w	r3, r3, #16
 80003da:	6193      	str	r3, [r2, #24]
			if(Pin >= 8)
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b07      	cmp	r3, #7
 80003e0:	d903      	bls.n	80003ea <GPIO_Init+0xee>
				Pin = Pin%8;
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	f003 0307 	and.w	r3, r3, #7
 80003e8:	70fb      	strb	r3, [r7, #3]
			pGPIOx->CRH |= Speed << (Pin*4) ;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	7879      	ldrb	r1, [r7, #1]
 80003f0:	78fa      	ldrb	r2, [r7, #3]
 80003f2:	0092      	lsls	r2, r2, #2
 80003f4:	fa01 f202 	lsl.w	r2, r1, r2
 80003f8:	431a      	orrs	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH &= (0x0 << 26);// it is required
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
			pGPIOx->CRH |= (0x8 << 24);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	605a      	str	r2, [r3, #4]
}
 8000414:	e060      	b.n	80004d8 <GPIO_Init+0x1dc>
	}else if(Mode == GPIO_Mode_AF_PP)
 8000416:	78bb      	ldrb	r3, [r7, #2]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d15d      	bne.n	80004d8 <GPIO_Init+0x1dc>
		if(pGPIOx == GPIOA)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a31      	ldr	r2, [pc, #196]	; (80004e4 <GPIO_Init+0x1e8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_Init+0x136>
			Enable_RCC_Pheririal_BUS(IOPAEN);
 8000424:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <GPIO_Init+0x1ec>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a2f      	ldr	r2, [pc, #188]	; (80004e8 <GPIO_Init+0x1ec>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	e014      	b.n	800045c <GPIO_Init+0x160>
		}else if(pGPIOx == GPIOB)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <GPIO_Init+0x1f0>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_Init+0x14c>
			Enable_RCC_Pheririal_BUS(IOPBEN);
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <GPIO_Init+0x1ec>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a2a      	ldr	r2, [pc, #168]	; (80004e8 <GPIO_Init+0x1ec>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	e009      	b.n	800045c <GPIO_Init+0x160>
		 }else if(pGPIOx == GPIOC)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a29      	ldr	r2, [pc, #164]	; (80004f0 <GPIO_Init+0x1f4>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d105      	bne.n	800045c <GPIO_Init+0x160>
				Enable_RCC_Pheririal_BUS(IOPCEN);
 8000450:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <GPIO_Init+0x1ec>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <GPIO_Init+0x1ec>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6193      	str	r3, [r2, #24]
		Enable_RCC_Pheririal_BUS(AFIO_EN);
 800045c:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <GPIO_Init+0x1ec>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <GPIO_Init+0x1ec>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6193      	str	r3, [r2, #24]
		pGPIOx->CRL &= ~(0xF << Pin*4);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	78fa      	ldrb	r2, [r7, #3]
 800046e:	0092      	lsls	r2, r2, #2
 8000470:	210f      	movs	r1, #15
 8000472:	fa01 f202 	lsl.w	r2, r1, r2
 8000476:	43d2      	mvns	r2, r2
 8000478:	401a      	ands	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	601a      	str	r2, [r3, #0]
		pGPIOx->CRL |= Speed << Pin*4;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	7879      	ldrb	r1, [r7, #1]
 8000484:	78fa      	ldrb	r2, [r7, #3]
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	431a      	orrs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	601a      	str	r2, [r3, #0]
		pGPIOx->CRL |= Mode << ( (Pin*4)+2);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	78b9      	ldrb	r1, [r7, #2]
 8000498:	78fa      	ldrb	r2, [r7, #3]
 800049a:	0092      	lsls	r2, r2, #2
 800049c:	3202      	adds	r2, #2
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	431a      	orrs	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	601a      	str	r2, [r3, #0]
		AFIO->EXTICR[1] |= 1<<4;
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <GPIO_Init+0x1f8>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <GPIO_Init+0x1f8>)
 80004ae:	f043 0310 	orr.w	r3, r3, #16
 80004b2:	60d3      	str	r3, [r2, #12]
		EXTI->IMR  |= 1<<5;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <GPIO_Init+0x1fc>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <GPIO_Init+0x1fc>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6013      	str	r3, [r2, #0]
		EXTI->RTSR |= 1<<5;
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <GPIO_Init+0x1fc>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <GPIO_Init+0x1fc>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1<<5);
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <GPIO_Init+0x1fc>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <GPIO_Init+0x1fc>)
 80004d2:	f023 0320 	bic.w	r3, r3, #32
 80004d6:	60d3      	str	r3, [r2, #12]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40010800 	.word	0x40010800
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010c00 	.word	0x40010c00
 80004f0:	40011000 	.word	0x40011000
 80004f4:	40010000 	.word	0x40010000
 80004f8:	40010400 	.word	0x40010400

080004fc <GPIO_Read>:

	pGPIOx ->ODR ^= (1<<Pin);
}

uint8_t GPIO_Read(GPIO_TypeDef *pGPIOx, uint8_t Pin )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	460b      	mov	r3, r1
 8000506:	70fb      	strb	r3, [r7, #3]
return ( (pGPIOx->IDR >> Pin) & 1);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	fa22 f303 	lsr.w	r3, r2, r3
 8000512:	b2db      	uxtb	r3, r3
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	b2db      	uxtb	r3, r3
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <EXTI_IRQHandler>:



void EXTI_IRQHandler( uint8_t IRQ, uint8_t ENorDI )
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	if(EN)
	{
	// 1 : Set NVIC Register
		// 1.1 : NVIC Interrupt Set Enable Regiter
			*(NVIC_ISER0)	|= (1<<IRQ);
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <EXTI_IRQHandler+0x38>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	2101      	movs	r1, #1
 800053c:	fa01 f202 	lsl.w	r2, r1, r2
 8000540:	4611      	mov	r1, r2
 8000542:	4a06      	ldr	r2, [pc, #24]	; (800055c <EXTI_IRQHandler+0x38>)
 8000544:	430b      	orrs	r3, r1
 8000546:	6013      	str	r3, [r2, #0]
			*(NVIC_ICER0)	|= (0<<IRQ);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI_IRQHandler+0x3c>)
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <EXTI_IRQHandler+0x3c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6013      	str	r3, [r2, #0]
	{
		// 1.2 : NVIC INterrupt Clear Register
			*(NVIC_ICER0)	|= (1<<IRQ);

	}
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000e100 	.word	0xe000e100
 8000560:	e000e180 	.word	0xe000e180

08000564 <EXTI_IRQPriority>:


void EXTI_IRQPriority(uint8_t IRQ,uint8_t Priority)
{
 8000564:	b480      	push	{r7}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]

	// 1.3 : NVIC Priority Register
	uint32_t ipr			=	IRQ/4;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	089b      	lsrs	r3, r3, #2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	617b      	str	r3, [r7, #20]
	uint8_t ipr_section = 	IRQ%4;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 0303 	and.w	r3, r3, #3
 8000582:	74fb      	strb	r3, [r7, #19]
	uint8_t shift 		=	(ipr_section * 8) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000584:	7cfb      	ldrb	r3, [r7, #19]
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	3304      	adds	r3, #4
 800058c:	74bb      	strb	r3, [r7, #18]
	uint32_t *NVIC_IPR_x = 	((NVIC_IPR + (ipr)));
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000596:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800059a:	60fb      	str	r3, [r7, #12]

	*NVIC_IPR_x	|= ( Priority << shift );
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	79b9      	ldrb	r1, [r7, #6]
 80005a2:	7cba      	ldrb	r2, [r7, #18]
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	431a      	orrs	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	601a      	str	r2, [r3, #0]
	//*(NVIC_IPR + (ipr*4)) |= (Priority << shift );
	//*NVIC_IPR_5	|= (Priority << shift );
}
 80005ae:	bf00      	nop
 80005b0:	371c      	adds	r7, #28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <GPIO_IRQHandler>:

void GPIO_IRQHandler(uint8_t Pin)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]

if( EXTI->PR & (1 << Pin) )
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <GPIO_IRQHandler+0x40>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	79fa      	ldrb	r2, [r7, #7]
 80005c8:	2101      	movs	r1, #1
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	4013      	ands	r3, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d009      	beq.n	80005e8 <GPIO_IRQHandler+0x30>
{
		EXTI->PR |= 1<<Pin;//clear pending bit
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <GPIO_IRQHandler+0x40>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <GPIO_IRQHandler+0x40>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6153      	str	r3, [r2, #20]

}
EXTI_IRQHandler(23, DI);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2017      	movs	r0, #23
 80005ec:	f7ff ff9a 	bl	8000524 <EXTI_IRQHandler>


}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40010400 	.word	0x40010400

080005fc <__libc_init_array>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2500      	movs	r5, #0
 8000600:	4e0c      	ldr	r6, [pc, #48]	; (8000634 <__libc_init_array+0x38>)
 8000602:	4c0d      	ldr	r4, [pc, #52]	; (8000638 <__libc_init_array+0x3c>)
 8000604:	1ba4      	subs	r4, r4, r6
 8000606:	10a4      	asrs	r4, r4, #2
 8000608:	42a5      	cmp	r5, r4
 800060a:	d109      	bne.n	8000620 <__libc_init_array+0x24>
 800060c:	f000 f81a 	bl	8000644 <_init>
 8000610:	2500      	movs	r5, #0
 8000612:	4e0a      	ldr	r6, [pc, #40]	; (800063c <__libc_init_array+0x40>)
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <__libc_init_array+0x44>)
 8000616:	1ba4      	subs	r4, r4, r6
 8000618:	10a4      	asrs	r4, r4, #2
 800061a:	42a5      	cmp	r5, r4
 800061c:	d105      	bne.n	800062a <__libc_init_array+0x2e>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000624:	4798      	blx	r3
 8000626:	3501      	adds	r5, #1
 8000628:	e7ee      	b.n	8000608 <__libc_init_array+0xc>
 800062a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800062e:	4798      	blx	r3
 8000630:	3501      	adds	r5, #1
 8000632:	e7f2      	b.n	800061a <__libc_init_array+0x1e>
 8000634:	0800065c 	.word	0x0800065c
 8000638:	0800065c 	.word	0x0800065c
 800063c:	0800065c 	.word	0x0800065c
 8000640:	08000660 	.word	0x08000660

08000644 <_init>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr

08000650 <_fini>:
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	bf00      	nop
 8000654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000656:	bc08      	pop	{r3}
 8000658:	469e      	mov	lr, r3
 800065a:	4770      	bx	lr
